{"version":3,"sources":["index.js"],"names":["cols","document","querySelectorAll","generateRandomColor","hexCodes","color","i","Math","floor","random","length","copyToClickBoard","text","navigator","clipboard","writeText","setRandomColours","isInitial","colors","getColorsFromHash","forEach","col","index","isLocked","querySelector","classList","contains","button","push","textContent","chroma","style","background","setTextColor","updateColorsHash","luminance","location","hash","map","toString","substring","join","split","targetElement","showHelpMessage","setTimeout","hideHelpMessage","console","error","helpMessage","getElementById","rect","getBoundingClientRect","top","window","scrollY","left","scrollX","offsetWidth","display","copyAndShowMessage","then","log","catch","addEventListener","event","preventDefault","code","toLocaleLowerCase","type","target","dataset","node","tagName","children","toggle","isLockButton","closest","icon"],"mappings":"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","file":"src.06d04083.js","sourceRoot":"..\\src","sourcesContent":["const cols = document.querySelectorAll('.col');\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n  event.preventDefault();\r\n\r\n  if (event.code.toLocaleLowerCase() === 'space')  {\r\n    setRandomColours();\r\n  }\r\n})\r\n\r\ndocument.addEventListener('click', event => {\r\n  const type = event.target.dataset.type;\r\n\r\n  if (type === 'lock') {\r\n    const node =\r\n      event.target.tagName.toLocaleLowerCase() === 'i'\r\n        ? event.target\r\n        : event.target.children[0]\r\n\r\n    node.classList.toggle('fa-lock-open');\r\n    node.classList.toggle('fa-lock');\r\n  } else if (type === 'copy') {\r\n    copyToClickBoard(event.target.textContent);\r\n  }\r\n})\r\n\r\nfunction generateRandomColor() {\r\n  const hexCodes = '0123456789ABCDEF';\r\n  let color = '';\r\n  for (let i = 0; i < 6; i++) {\r\n    color += hexCodes[Math.floor(Math.random() * hexCodes.length)];\r\n  }\r\n\r\n  return '#' + color;\r\n}\r\n\r\nfunction copyToClickBoard(text) {\r\n  return navigator.clipboard.writeText(text);\r\n}\r\n\r\nfunction setRandomColours(isInitial) {\r\n  const colors = isInitial ? getColorsFromHash() : [];\r\n\r\n  cols.forEach((col, index) => {\r\n    const isLocked = col.querySelector('i').classList.contains('fa-lock');\r\n    const text = col.querySelector('h2');\r\n    const button = col.querySelector('button');\r\n\r\n    if(isLocked) {\r\n      colors.push(text.textContent);\r\n      return;\r\n    }\r\n\r\n    const color = isInitial \r\n      ? colors[index]\r\n        ? colors[index]\r\n        : chroma.random()\r\n      : chroma.random()\r\n\r\n    if (!isInitial) {\r\n      colors.push(color);\r\n    }\r\n\r\n    text.textContent = color;\r\n    col.style.background = color;\r\n\r\n    setTextColor(text, color);\r\n    setTextColor(button, color);\r\n  })\r\n\r\n  updateColorsHash(colors);\r\n}\r\n\r\nfunction setTextColor(text, color) {\r\n  const luminance = chroma(color).luminance();\r\n  text.style.color = luminance > 0.5 ? 'black' : 'white';\r\n}\r\n\r\nfunction updateColorsHash(colors = []) {\r\n  document.location.hash = colors\r\n    .map(col => col.toString().substring(1))\r\n    .join('-')\r\n}\r\n\r\nfunction getColorsFromHash() {\r\n  if (document.location.hash.length > 1) {\r\n   return document.location.hash\r\n     .substring(1)\r\n     .split('-')\r\n     .map(color => '#' + color)\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nfunction copyToClickBoard(text, targetElement) {\r\n  const copySuccess = navigator.clipboard.writeText(text);\r\n  if (copySuccess) {\r\n    showHelpMessage(targetElement);\r\n    setTimeout(hideHelpMessage, 2000); // Hide message after 2 seconds\r\n  } else {\r\n    console.error('Failed to copy color to clipboard.');\r\n  }\r\n}\r\n\r\nfunction showHelpMessage(targetElement) {\r\n  const helpMessage = document.getElementById('helpMessage');\r\n  const rect = targetElement.getBoundingClientRect();\r\n  const top = rect.top + window.scrollY;\r\n  const left = rect.left + window.scrollX + targetElement.offsetWidth + 10; // Adjust this value as needed for spacing\r\n  helpMessage.style.top = `${top}px`;\r\n  helpMessage.style.left = `${left}px`;\r\n  helpMessage.style.display = 'block';\r\n}\r\n\r\nfunction hideHelpMessage() {\r\n  const helpMessage = document.getElementById('helpMessage');\r\n  helpMessage.style.display = 'none';\r\n}\r\n\r\ndocument.addEventListener('click', event => {\r\n  const target = event.target;\r\n  const isLockButton = target.closest('[data-type=\"lock\"]');\r\n\r\n  if (isLockButton) {\r\n    const icon = isLockButton.querySelector('i');\r\n    icon.classList.toggle('fa-lock-open');\r\n    icon.classList.toggle('fa-lock');\r\n  } else if (target.dataset.type === 'copy') {\r\n    const text = target.textContent;\r\n    copyAndShowMessage(text, target);\r\n  }\r\n});\r\n\r\nfunction copyAndShowMessage(text, targetElement) {\r\n  navigator.clipboard.writeText(text)\r\n    .then(() => {\r\n      console.log('Color copied to clipboard');\r\n      const helpMessage = document.getElementById('helpMessage');\r\n      const rect = targetElement.getBoundingClientRect();\r\n      const top = rect.top + window.scrollY;\r\n      const left = rect.left + window.scrollX + targetElement.offsetWidth + 10; // Adjust as needed\r\n      helpMessage.style.top = `${top}px`;\r\n      helpMessage.style.left = `${left}px`;\r\n      helpMessage.style.display = 'block';\r\n\r\n      setTimeout(() => {\r\n        helpMessage.style.display = 'none';\r\n      }, 2000); // Hide after 2 seconds\r\n    })\r\n    .catch(error => console.error('Failed to copy color to clipboard:', error));\r\n}\r\n\r\nsetRandomColours(true);"]}